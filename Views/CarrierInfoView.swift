import SwiftUI
import OpenAPIURLSession

struct CarrierInfoView: View {
    @State private var carriers: [Components.Schemas.Carrier] = []
    @State private var errorMessage: String?
    @State private var isLoading = false
    
    let service: YandexRaspServiceProtocol
    
    var body: some View {
        VStack(spacing: 16) {
            Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ")
                .font(.title2)
                .bold()
            
            Text("üîç –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –ê—ç—Ä–æ—Ñ–ª–æ—Ç (–∫–æ–¥ IATA: SU)")
                .font(.subheadline)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            if isLoading {
                ProgressView("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
            } else if let errorMessage {
                Text("–û—à–∏–±–∫–∞: \(errorMessage)")
                    .foregroundColor(.red)
            } else if carriers.isEmpty {
                Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            } else {
                List(carriers, id: \.code) { carrier in
                    VStack(alignment: .leading, spacing: 8) {
                        Text(formattedCarrierTitle(carrier: carrier))
                            .font(.headline)
                            .frame(maxWidth: .infinity, alignment: .center)
                        Spacer()
                        if let url = carrier.url, let urlObj = URL(string: url) {
                            Link("üåê \(url)", destination: urlObj)
                                .foregroundColor(.blue)
                        }
                        
                        if let address = carrier.address {
                            Text("üè¢ –ê–¥—Ä–µ—Å:")
                                .bold()
                            Text(address)
                        }
                        
                        if let contacts = carrier.contacts, !contacts.isEmpty {
                            Text("üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã:")
                                .bold()
                            Text(contacts.replacingOccurrences(of: "<[^>]+>", with: "", options: .regularExpression))
                                .fixedSize(horizontal: false, vertical: true)
                        }
                        
                        if let logo = carrier.logo,
                           let logoURL = URL(string: logo.hasPrefix("http") ? logo : "https:" + logo) {
                            AsyncImage(url: logoURL) { image in
                                image
                                    .resizable()
                                    .aspectRatio(contentMode: .fit)
                                    .frame(height: 60)
                            } placeholder: {
                                ProgressView()
                            }
                        }
                    }
                    .padding(.vertical, 4)
                }
            }
            
            Spacer()
        }
        .padding()
        .onAppear {
            Task {
                await loadCarrierInfo()
            }
        }
    }
    
    private func formattedCarrierTitle(carrier: Components.Schemas.Carrier) -> String {
        let icao = carrier.codes?.icao
        let iata = carrier.codes?.iata
        
        let codes = [icao, iata].compactMap { $0 }.joined(separator: " / ")
        let title = carrier.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        
        return codes.isEmpty ? title : "\(title) (\(codes))"
    }
    
    private func loadCarrierInfo() async {
        isLoading = true
        defer { isLoading = false }

        do {
            let result = try await service.getCarrierInfo(
                code: "SU",
                system: "iata"
            )
            print("üëâ –û—Ç–≤–µ—Ç –æ—Ç API: \(result)")

            if let carriers = result.carriers, !carriers.isEmpty {
                print("üì¶ carriers: \(carriers)")
                self.carriers = carriers
            } else {
                print("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ")
                errorMessage = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–µ"
            }
        } catch {
            print("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)")
            errorMessage = error.localizedDescription
        }
    }
}
